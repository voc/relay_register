%ul.head_menu
  %li
    %a{href: url('/graph')} graph
  %li
    %a{href: url('/tags')} tags
  %li
    %a{href: url('/settings')} settings
  %li
    %a{href: url('/relays')} json
  %li
    %a{href: url('/ipaddresses')} list all ipaddresses

%ul.head_status
  %li
    = "relay count: #{@relays.count}"
  %li
    = "public relays: #{@public_relays.count}"
  %li
    = "master relays: #{@relays.where(public: false, lb: false).count}"
  %li
    = "loadbalancer: #{@relays.where(lb: true).count}"

- if @group
  - @relays.group_by{ |r| @subnet_tree.search(r.ip)[:name] }.each do |asn, relays|
    %h3= asn
    %table{ border: true}
      %thead
        %tr
          %th
            %a{href: url('/?sort=pbl')} pbl
          %th tags
          %th
            %a{href: url('/?sort=hostname')} hostname
          %th cpus
          %th interfaces
          %th disk space
          %th
            %a{href: url('/?sort=memory')} memory
          %th
            %a{href: url('/?sort=master')} master
          %th actions
      %tbody
        - relays.each do |relay|
          %tr{ title: "#{asn}"}
            - if relay.lb
              %td{class: 'loadbalancer'}
            - elsif relay.public
              %td{class: 'public'}
            - elsif relay.public == false
              %td{class: 'non_public'}
            - else
              %td
            %td
              %a{ href: url("/relay/#{relay.id}")}
                = relay.tags.map(&:name).join('<br>')
            %td
              %a{ href: url("/relay/#{relay.id}")}= relay.hostname_short
            %td
              %a{ href: url("/relay/#{relay.id}#cpu") }= "#{relay.cpu_cores}x #{relay.cpu_model_name}"
            %td
              - relay.interfaces.each do |k,v|
                - next if k =~ /^lo/ || v['ipv4'].count == 0
                %a{href: url("/relay/#{relay.id}#ip")}= "#{k}: #{v['ipv4'].join(', ')}"
                %br
            %td
              %a{href: url("/relay/#{relay.id}#disk")}= relay.free_space
            %td
              %a{href: url("/relay/#{relay.id}#memory")}= "#{relay.total_memory}"
            %td
              - begin
                = Relay.find(relay.master).hostname_short
              - rescue
                = ""
            %td
              %a{ href: url("/relay/#{relay.id}/edit"), class: 'action' } edit
              %a{ href: url("/relay/#{relay.id}/delete"), class: 'action' } delete

- else
  %table{ border: true}
    %thead
      %tr
        %th
          %a{href: url('/?sort=pbl')} pbl
        %th
          tags
        %th
          %a{href: url('/?sort=hostname')} hostname
        %th cpus
        %th interfaces
        %th disk space
        %th
          %a{href: url('/?sort=memory')} memory
        %th
          %a{href: url('/?sort=master')} master
        %th actions
    %tbody
      - @relays.each do |relay|
        %tr{ title: "#{@subnet_tree.search(relay.ip)[:name]}"}
          - if relay.public
            %td{class: 'public'}
          - elsif relay.public == false
            %td{class: 'non_public'}
          - else
            %td
          %td
            %a{ href: url("/relay/#{relay.id}")}
              = relay.tags.map(&:name).join('<br>')
          %td
            %a{ href: url("/relay/#{relay.id}")}= relay.hostname_short
          %td
            %a{ href: url("/relay/#{relay.id}#cpu") }= "#{relay.cpu_cores}x #{relay.cpu_model_name}"
          %td
            - relay.interfaces.each do |k,v|
              - next if k =~ /^lo/ || v['ipv4'].count == 0
              %a{href: url("/relay/#{relay.id}#ip")}= "#{k}: #{v['ipv4'].join(', ')}"
              %br
          %td
            %a{href: url("/relay/#{relay.id}#disk")}= relay.free_space
          %td
            %a{href: url("/relay/#{relay.id}#memory")}= "#{relay.total_memory}"
          %td
            - begin
              = Relay.find(relay.master).hostname_short
            - rescue
              = ""
          %td
            %a{ href: url("/relay/#{relay.id}/edit"), class: 'action' } edit
            %a{ href: url("/relay/#{relay.id}/delete"), class: 'action' } delete
